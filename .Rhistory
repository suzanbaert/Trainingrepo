tm_bubbles("pop2010", col = "growth", border.alpha = .1) +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group", border.alpha = 0.3) +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth", border.alpha = .1) +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp") +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues") +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7) +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.1) +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7) +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name") +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010")+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth")+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth", border.col = "black")+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth", border.col = "black", border.alpha = .5)+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed")+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf))+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1)+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population")+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population")+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population",
itle.col="Growth rate (%)")+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population",
itle.col="Growth rate (%)", id="name")+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population",
title.col="Growth rate (%)") +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population",
title.col="Growth rate (%)", id="name") +
tm_style_gray() + tm_format_World()
tmap_mode("view")
mapWorld
mapWorld <- tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population",
title.col="Growth rate (%)", id="name") +
tm_style_gray() + tm_format_World()
mapWorld <- tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population",
title.col="Growth rate (%)", id="name") +
tm_style_gray() + tm_format_World()
tmap_mode("show")
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population",
title.col="Growth rate (%)", id="name") +
tm_style_gray() + tm_format_World()
tmap_mode("show")
tmap_mode("plot")
mapworld
mapWorld <- tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population",
title.col="Growth rate (%)", id="name") +
tm_style_gray() + tm_format_World()
tmap_mode("plot")
mapworld
mapWorld
tmap_mode("view")
mapWorld
glimpse(metro)
str(metro)
#Barplot of urdered arranges it alphabetically?
fruit %>%
ggplot(aes(x=unordered_col))+
geom_bar()
a
a
library(tidyverse)
#simple example: dataframe with 1 unordered and one ordered factor
list <- c("Fig", "Banana", "Citrus", "Dragonfruit", "Elderberry", "Apple")
levels <-list[order(nchar(list))]
unordered_col <- factor(sample(list, 50, replace=TRUE))
ordered_col <- factor(col1, levels=levels, ordered=TRUE)
unordered_col <- factor(sample(list, 50, replace=TRUE))
ordered_col <- factor(unordered_col, levels=levels, ordered=TRUE)
recently_unordered_col <- factor(ordered_col, ordered=TRUE)
fruit <- data.frame(ordered_col, unordered_col, recently_unordered_col)
glimpse(fruit)
#Barplot of urdered arranges it alphabetically?
fruit %>%
ggplot(aes(x=unordered_col))+
geom_bar()
#Barplot of urdered arranges it according to the levels
fruit %>%
ggplot(aes(x=ordered_col))+
geom_bar()
fruit$col3 <- factor(fruit$ordered_col, ordered=FALSE)
fruit %>%
ggplot(aes(x=recently_unordered_col))+
geom_bar()
#Changing the order cannot be overwritten with the arrange function
col %>%
ggplot(aes(x=col2))+
geom_bar()
#Changing the order cannot be overwritten with the arrange function
fruit %>%
arrange(n)
u
#Changing the order cannot be overwritten with the arrange function
fruit %>%
arrange(unordered_col)
#Changing the order cannot be overwritten with the arrange function
fruit %>%
count(unordered_col) %>%
arrange(n) %>%
col %>%
ggplot(aes(x=col2))+
geom_bar()
#Changing the order cannot be overwritten with the arrange function
fruit %>%
count(unordered_col) %>%
arrange(n) %>%
col %>%
ggplot(aes(x=col2))+
geom_bar()
#Changing the order cannot be overwritten with the arrange function
fruit %>%
count(unordered_col) %>%
arrange(n)
#Changing the order cannot be overwritten with the arrange function
fruit %>%
count(unordered_col) %>%
arrange(desc(n))
#Changing the order cannot be overwritten with the arrange function
fruit %>%
count(unordered_col) %>%
arrange(desc(n)) %>%
ggplot(aes(x=recently_unordered_col))+
geom_bar()
#Changing the order cannot be overwritten with the arrange function
fruit %>%
count(unordered_col) %>%
arrange(desc(n)) %>%
ggplot(aes(x=recently_unordered_col))+
geom_col(., n)
#Changing the order cannot be overwritten with the arrange function
fruit %>%
count(unordered_col) %>%
arrange(desc(n)) %>%
ggplot(aes(x=unordered_col,n))+
geom_col()
fruit %>%
count(unordered_col) %>%
ggplot(aes(x=reorder(unordered_col,n)))+
geom_col()
fruit %>%
count(unordered_col) %>%
reorder(unordered_col, n)
fruit %>%
count(unordered_col)
fruit %>%
count(unordered_col) %>%
reorder(unordered_col, n)
fruit %>%
count(unordered_col) %>%
reorder(unordered_col, n)%>%
ggplot(aes(x=unordered_col,n))+
geom_col()
fruit %>%
count(unordered_col) %>%
mutate(unordered_col = reorder(unordered_col, n)) %>%
ggplot(aes(x=unordered_col,n))+
geom_col()
fruit %>%
count(unordered_col) %>%
mutate(unordered_col = reorder(unordered_col, n)) %>%
ggplot(aes(x=unordered_col,n))+
geom_col()+
coord_flip()
?reorder
fruit %>%
count(unordered_col) %>%
mutate(unordered_col = reorder(unordered_col, n))%>%
class()
fruit %>%
count(unordered_col) %>%
mutate(unordered_col = reorder(unordered_col, n))%>%
glimpse()
levels(ordered_col)
levels(recently_unordered_col)
levels(unordered_col)
#Check the underlying levels
levels(unordered_col)
glimpse(unordered_col)
head(unordered_col)
head(fruit)
library(tidyverse)
#simple example: dataframe with 1 unordered and one ordered factor
list <- c("Fig", "Banana", "Citrus", "Dragonfruit", "Elderberry", "Apple")
levels <-list[order(nchar(list))]
unordered_col <- factor(sample(list, 50, replace=TRUE))
ordered_col <- factor(unordered_col, levels=levels, ordered=TRUE)
recently_unordered_col <- factor(ordered_col, ordered=TRUE)
fruit <- data.frame(ordered_col, unordered_col, recently_unordered_col)
glimpse(fruit)
#Barplot of ordered arranges it alphabetically
fruit %>%
ggplot(aes(x=unordered_col))+
geom_bar()
#Barplot of urdered arranges it according to the levels
fruit %>%
ggplot(aes(x=ordered_col))+
geom_bar()
#Barplot of the factor that was unordered keeps its levels
fruit %>%
ggplot(aes(x=recently_unordered_col))+
geom_bar()
#Check the underlying levels
levels(unordered_col)
levels(ordered_col)
levels(recently_unordered_col)
#Changing the order cannot be overwritten with the arrange function
fruit %>%
count(unordered_col) %>%
arrange(desc(n)) %>%
ggplot(aes(x=unordered_col,n))+
geom_col()
fruit %>%
count(unordered_col) %>%
mutate(unordered_col = reorder(unordered_col, n)) %>%
ggplot(aes(x=unordered_col,n))+
geom_col()+
coord_flip()
fruit %>%
count(unordered_col) %>%
mutate(unordered_col = reorder(unordered_col, -n)) %>%
ggplot(aes(x=unordered_col,n))+
geom_col()
###DIAMONDS SECTION###
glimpse(diamonds)
#standard ggplot with the database piped in
diamonds %>%
ggplot(aes(x=carat, y=price, col=cut))+
geom_point()
unfactored_col <- as.character(ordered_col)
fruit <- data.frame(ordered_col, unordered_col, recently_unordered_col, unfactored_col)
#Barplot of the factor that was unordered keeps its levels
fruit %>%
ggplot(aes(x=unfactored_col))+
geom_bar()
levels(unfactored_col)
glimpse(fruit)
unfactored_col <- as.character(ordered_col)
fruit <- data.frame(ordered_col, unordered_col, recently_unordered_col, unfactored_col)
glimpse(fruit)
unfactored_col <- as.vector(ordered_col)
fruit <- data.frame(ordered_col, unordered_col, recently_unordered_col, unfactored_col)
glimpse(fruit)
fruit <- data.frame(ordered_col, unordered_col, recently_unordered_col, unfactored_col, stringsAsFactors = FALSE)
glimpse(fruit)
#Barplot of the string character
fruit %>%
ggplot(aes(x=unfactored_col))+
geom_bar()
levels(unfactored_col)
#Barplot of ordered arranges it alphabetically
fruit %>%
ggplot(aes(x=unordered_col))+
geom_bar(color="cadetblue")
#Barplot of ordered arranges it alphabetically
fruit %>%
ggplot(aes(x=unordered_col))+
geom_bar(fill="cadetblue")
#Barplot of urdered arranges it according to the levels
fruit %>%
ggplot(aes(x=ordered_col))+
geom_bar(fill="turquoise4")
#Barplot of urdered arranges it according to the levels
fruit %>%
ggplot(aes(x=ordered_col))+
geom_bar(fill="steelblue")
#Barplot of ordered arranges it alphabetically
fruit %>%
ggplot(aes(x=unordered_col))+
geom_bar(fill="red4")
geom_facet(a,b)
facet_grid(a,b)
#Barplot of the factor that was unordered keeps its levels
a <- fruit %>%
ggplot(aes(x=recently_unordered_col))+
geom_bar()
#Barplot of the string character
b <- fruit %>%
ggplot(aes(x=unfactored_col))+
geom_bar()
facet_grid(a,b)
grid.arrange(a,b)
install.packages(cowplot)
install.packages("cowplot")
library(cowplot)
plotgrid(a,b)
plot_grid(a,b)
get_tutorial("EDA")
library(learningAnalytics)
get_tutorial("EDA")
library(learningAnalytics)
get_tutorial("Unsupervised")
library(httr)
# The API url
base_url <- "https://en.wikipedia.org/w/api.php"
# Set query parameters
query_params <- list(action="parse",
page="Hadley Wickham",
format="xml")
# Get data from API
resp <- GET(url = base_url, query = query_params)
# Parse response
resp_xml <- content(resp)
#Extracting the html information
# Load rvest
library(rvest)
library(xml2)
# Read page contents as HTML
page_html <- read_html(xml_text(resp_xml))
# Extract infobox element
infobox_element <- html_node(page_html, css=".infobox")
# Extract page name element from infobox
page_name <- html_node(infobox_element, css=".fn")
# Extract page name as text
page_title <- html_text(page_name)
# infobox data
wiki_table <- html_table(infobox_element)
colnames(wiki_table) <- c("key", "value")
cleaned_table <- subset(wiki_table, !key == "")
# Create a dataframe for full name
name_df <- data.frame(key = "Full name", value = page_title)
# Combine name_df with cleaned_table
wiki_table2 <- rbind(name_df, cleaned_table)
# Print wiki_table
wiki_table2
# Load rvest
library(rvest)
# Hadley Wickham's Wikipedia page
test_url <- "https://en.wikipedia.org/wiki/Hadley_Wickham"
# Read the URL stored as "test_url" with read_html()
test_xml <- read_html(test_url)
# Print test_xml
test_xml
library(xml2)
# Extract the name of table_element
element_name <- html_name(table_element)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = TRUE)
library(tidyverse)
library(magrittr)
multiple_choice_responses_base <- read.csv("multipleChoiceResponses.csv")
multiple_choice_responses_base
# for one column
sum(is.na(multiple_choice_responses_base$Country))
multiple_choice_responses_base %>%
purrr::map_df(~sum(is.na(.)))
multiple_choice_responses_base %>%
dplyr::count(StudentStatus)
multiple_choice_responses_base %>%
dplyr::count(StudentStatus)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = TRUE)
library(tidyverse)
library(magrittr)
# for one column
sum(is.na(multiple_choice_responses_base$Country))
multiple_choice_responses_base %>%
purrr::map_df(~sum(is.na(.)))
install.packages("skimr")
data()
str(AirPassengers)
str(EuStockMarkets)
str(LakeHuron)
str(ability.cov)
str(cars)
str(discoveries)
str(crimtab)
st(faithful)
str(faithful)
str(occupationalStatus)
str(rivers)
library(dplyr)
str(nasa)
str(state.abb)
str(trees)
str(starwars)
str(storms)
str(txhousing)
str(smiths)
str(population)
str(who)
data(package = .packages(all.available = TRUE))
library(lubridate)
str(lakers)
str(breweries)
library(mapview)
str(breweries)
