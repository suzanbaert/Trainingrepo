gather_residuals(mtcars_mod3, mtcars_mod4) %>%
ggplot(aes(wt, resid, color = cyl)) +
geom_ref_line(h = 0) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_grid(model ~ cyl, scales = "free")
# compare the following two models for the mtcars data
mtcars_mod3 <- lm(mpg ~ wt + as.factor(cyl), data = mtcars)
mtcars_mod4 <- lm(mpg ~ wt * as.factor(cyl), data = mtcars)
# compare summaries
summary(mtcars_mod3)
summary(mtcars_mod4)
# compare model matrix
model_matrix(mtcars, mpg ~ wt + as.factor(cyl))
model_matrix(mtcars, mpg ~ wt * as.factor(cyl))
# compare predicted values
mtcars %>%
mutate(cyl = as.factor(cyl)) %>%
select(mpg, wt, cyl) %>%
gather_predictions(mtcars_mod3, mtcars_mod4) %>%
ggplot(aes(wt, mpg, color = cyl)) +
geom_point() +
geom_line(aes(y = pred, color = cyl)) +
facet_grid(model ~ cyl, scales = "free")
# compare residuals
mtcars %>%
mutate(cyl = as.factor(cyl)) %>%
select(mpg, wt, cyl) %>%
gather_residuals(mtcars_mod3, mtcars_mod4) %>%
ggplot(aes(wt, resid, color = cyl)) +
geom_ref_line(h = 0) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_grid(model ~ cyl, scales = "free")
install.pcak
install.packages("icon")
vignette(tmap)
vignette("tmap")
library(tmap)
vignette("tmap-modes")
metro$growth <- (metro$pop2020 - metro$pop2010) / (metro$pop2010 * 10) * 100
data(World, metro)
library(tmap)
data(World, metro)
metro$growth <- (metro$pop2020 - metro$pop2010) / (metro$pop2010 * 10) * 100
mapWorld <- tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population",
title.col="Growth rate (%)", id="name") +
tm_style_gray() + tm_format_World()
mapWorld
tmap_mode("view")
mapWorld
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group")
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro)
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010")
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010") +
tm_style_gray()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010") +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth") +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth", border.alpha = .5) +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth", border.alpha = .1) +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group", border.alpha = 0.1) +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth", border.alpha = .1) +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group", border.alpha = 0.3) +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth", border.alpha = .1) +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp") +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues") +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7) +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.1) +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7) +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name") +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010")+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth")+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth", border.col = "black")+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth", border.col = "black", border.alpha = .5)+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed")+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf))+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1)+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population")+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population")+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population",
itle.col="Growth rate (%)")+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population",
itle.col="Growth rate (%)", id="name")+
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population",
title.col="Growth rate (%)") +
tm_style_gray() + tm_format_World()
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population",
title.col="Growth rate (%)", id="name") +
tm_style_gray() + tm_format_World()
tmap_mode("view")
mapWorld
mapWorld <- tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population",
title.col="Growth rate (%)", id="name") +
tm_style_gray() + tm_format_World()
mapWorld <- tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population",
title.col="Growth rate (%)", id="name") +
tm_style_gray() + tm_format_World()
tmap_mode("show")
tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population",
title.col="Growth rate (%)", id="name") +
tm_style_gray() + tm_format_World()
tmap_mode("show")
tmap_mode("plot")
mapworld
mapWorld <- tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population",
title.col="Growth rate (%)", id="name") +
tm_style_gray() + tm_format_World()
tmap_mode("plot")
mapworld
mapWorld
tmap_mode("view")
mapWorld
glimpse(metro)
str(metro)
#Barplot of urdered arranges it alphabetically?
fruit %>%
ggplot(aes(x=unordered_col))+
geom_bar()
a
a
library(tidyverse)
#simple example: dataframe with 1 unordered and one ordered factor
list <- c("Fig", "Banana", "Citrus", "Dragonfruit", "Elderberry", "Apple")
levels <-list[order(nchar(list))]
unordered_col <- factor(sample(list, 50, replace=TRUE))
ordered_col <- factor(col1, levels=levels, ordered=TRUE)
unordered_col <- factor(sample(list, 50, replace=TRUE))
ordered_col <- factor(unordered_col, levels=levels, ordered=TRUE)
recently_unordered_col <- factor(ordered_col, ordered=TRUE)
fruit <- data.frame(ordered_col, unordered_col, recently_unordered_col)
glimpse(fruit)
#Barplot of urdered arranges it alphabetically?
fruit %>%
ggplot(aes(x=unordered_col))+
geom_bar()
#Barplot of urdered arranges it according to the levels
fruit %>%
ggplot(aes(x=ordered_col))+
geom_bar()
fruit$col3 <- factor(fruit$ordered_col, ordered=FALSE)
fruit %>%
ggplot(aes(x=recently_unordered_col))+
geom_bar()
#Changing the order cannot be overwritten with the arrange function
col %>%
ggplot(aes(x=col2))+
geom_bar()
#Changing the order cannot be overwritten with the arrange function
fruit %>%
arrange(n)
u
#Changing the order cannot be overwritten with the arrange function
fruit %>%
arrange(unordered_col)
#Changing the order cannot be overwritten with the arrange function
fruit %>%
count(unordered_col) %>%
arrange(n) %>%
col %>%
ggplot(aes(x=col2))+
geom_bar()
#Changing the order cannot be overwritten with the arrange function
fruit %>%
count(unordered_col) %>%
arrange(n) %>%
col %>%
ggplot(aes(x=col2))+
geom_bar()
#Changing the order cannot be overwritten with the arrange function
fruit %>%
count(unordered_col) %>%
arrange(n)
#Changing the order cannot be overwritten with the arrange function
fruit %>%
count(unordered_col) %>%
arrange(desc(n))
#Changing the order cannot be overwritten with the arrange function
fruit %>%
count(unordered_col) %>%
arrange(desc(n)) %>%
ggplot(aes(x=recently_unordered_col))+
geom_bar()
#Changing the order cannot be overwritten with the arrange function
fruit %>%
count(unordered_col) %>%
arrange(desc(n)) %>%
ggplot(aes(x=recently_unordered_col))+
geom_col(., n)
#Changing the order cannot be overwritten with the arrange function
fruit %>%
count(unordered_col) %>%
arrange(desc(n)) %>%
ggplot(aes(x=unordered_col,n))+
geom_col()
fruit %>%
count(unordered_col) %>%
ggplot(aes(x=reorder(unordered_col,n)))+
geom_col()
fruit %>%
count(unordered_col) %>%
reorder(unordered_col, n)
fruit %>%
count(unordered_col)
fruit %>%
count(unordered_col) %>%
reorder(unordered_col, n)
fruit %>%
count(unordered_col) %>%
reorder(unordered_col, n)%>%
ggplot(aes(x=unordered_col,n))+
geom_col()
fruit %>%
count(unordered_col) %>%
mutate(unordered_col = reorder(unordered_col, n)) %>%
ggplot(aes(x=unordered_col,n))+
geom_col()
fruit %>%
count(unordered_col) %>%
mutate(unordered_col = reorder(unordered_col, n)) %>%
ggplot(aes(x=unordered_col,n))+
geom_col()+
coord_flip()
?reorder
fruit %>%
count(unordered_col) %>%
mutate(unordered_col = reorder(unordered_col, n))%>%
class()
fruit %>%
count(unordered_col) %>%
mutate(unordered_col = reorder(unordered_col, n))%>%
glimpse()
levels(ordered_col)
levels(recently_unordered_col)
levels(unordered_col)
#Check the underlying levels
levels(unordered_col)
glimpse(unordered_col)
head(unordered_col)
head(fruit)
library(tidyverse)
#simple example: dataframe with 1 unordered and one ordered factor
list <- c("Fig", "Banana", "Citrus", "Dragonfruit", "Elderberry", "Apple")
levels <-list[order(nchar(list))]
unordered_col <- factor(sample(list, 50, replace=TRUE))
ordered_col <- factor(unordered_col, levels=levels, ordered=TRUE)
recently_unordered_col <- factor(ordered_col, ordered=TRUE)
fruit <- data.frame(ordered_col, unordered_col, recently_unordered_col)
glimpse(fruit)
#Barplot of ordered arranges it alphabetically
fruit %>%
ggplot(aes(x=unordered_col))+
geom_bar()
#Barplot of urdered arranges it according to the levels
fruit %>%
ggplot(aes(x=ordered_col))+
geom_bar()
#Barplot of the factor that was unordered keeps its levels
fruit %>%
ggplot(aes(x=recently_unordered_col))+
geom_bar()
#Check the underlying levels
levels(unordered_col)
levels(ordered_col)
levels(recently_unordered_col)
#Changing the order cannot be overwritten with the arrange function
fruit %>%
count(unordered_col) %>%
arrange(desc(n)) %>%
ggplot(aes(x=unordered_col,n))+
geom_col()
fruit %>%
count(unordered_col) %>%
mutate(unordered_col = reorder(unordered_col, n)) %>%
ggplot(aes(x=unordered_col,n))+
geom_col()+
coord_flip()
fruit %>%
count(unordered_col) %>%
mutate(unordered_col = reorder(unordered_col, -n)) %>%
ggplot(aes(x=unordered_col,n))+
geom_col()
###DIAMONDS SECTION###
glimpse(diamonds)
#standard ggplot with the database piped in
diamonds %>%
ggplot(aes(x=carat, y=price, col=cut))+
geom_point()
unfactored_col <- as.character(ordered_col)
fruit <- data.frame(ordered_col, unordered_col, recently_unordered_col, unfactored_col)
#Barplot of the factor that was unordered keeps its levels
fruit %>%
ggplot(aes(x=unfactored_col))+
geom_bar()
levels(unfactored_col)
glimpse(fruit)
unfactored_col <- as.character(ordered_col)
fruit <- data.frame(ordered_col, unordered_col, recently_unordered_col, unfactored_col)
glimpse(fruit)
unfactored_col <- as.vector(ordered_col)
fruit <- data.frame(ordered_col, unordered_col, recently_unordered_col, unfactored_col)
glimpse(fruit)
fruit <- data.frame(ordered_col, unordered_col, recently_unordered_col, unfactored_col, stringsAsFactors = FALSE)
glimpse(fruit)
#Barplot of the string character
fruit %>%
ggplot(aes(x=unfactored_col))+
geom_bar()
levels(unfactored_col)
#Barplot of ordered arranges it alphabetically
fruit %>%
ggplot(aes(x=unordered_col))+
geom_bar(color="cadetblue")
#Barplot of ordered arranges it alphabetically
fruit %>%
ggplot(aes(x=unordered_col))+
geom_bar(fill="cadetblue")
#Barplot of urdered arranges it according to the levels
fruit %>%
ggplot(aes(x=ordered_col))+
geom_bar(fill="turquoise4")
#Barplot of urdered arranges it according to the levels
fruit %>%
ggplot(aes(x=ordered_col))+
geom_bar(fill="steelblue")
#Barplot of ordered arranges it alphabetically
fruit %>%
ggplot(aes(x=unordered_col))+
geom_bar(fill="red4")
geom_facet(a,b)
facet_grid(a,b)
#Barplot of the factor that was unordered keeps its levels
a <- fruit %>%
ggplot(aes(x=recently_unordered_col))+
geom_bar()
#Barplot of the string character
b <- fruit %>%
ggplot(aes(x=unfactored_col))+
geom_bar()
facet_grid(a,b)
grid.arrange(a,b)
install.packages(cowplot)
install.packages("cowplot")
library(cowplot)
plotgrid(a,b)
plot_grid(a,b)
get_tutorial("EDA")
library(learningAnalytics)
get_tutorial("EDA")
library(learningAnalytics)
get_tutorial("Unsupervised")
